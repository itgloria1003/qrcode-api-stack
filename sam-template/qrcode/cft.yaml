AWSTemplateFormatVersion: '2010-09-09'
Description: qrcode
Resources:
  putItemFunctionToTableConnectorPolicy:
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      SamResourceId: putItemFunctionToTableConnector
      aws:sam:connectors:
        putItemFunctionToTableConnector:
          Source:
            Type: AWS::Serverless::Function
          Destination:
            Type: AWS::Serverless::SimpleTable
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:BatchWriteItem
              - dynamodb:PartiQLDelete
              - dynamodb:PartiQLInsert
              - dynamodb:PartiQLUpdate
            Resource:
              - !GetAtt 'SampleTable.Arn'
              - !Sub
                - ${DestinationArn}/index/*
                - DestinationArn: !GetAtt 'SampleTable.Arn'
      Roles:
        - !Ref 'putItemFunctionRole'
  putItemFunctionApiPermissionProd:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref 'putItemFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/
        - __ApiId__: !Ref 'ServerlessRestApi'
          __Stage__: '*'
  putItemFunction:
    Type: AWS::Lambda::Function
    Metadata:
      SamResourceId: putItemFunction
    Properties:
      Code:
        S3Bucket: aws-sam-cli-managed-default-samclisourcebucket-1iagsxb1e817l
        S3Key: qrcode/38bb643827c17aef56bbff66ae5b9ebb
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Handler: src/handlers/put_item.putItemHandler
      MemorySize: 128
      Role: !GetAtt 'putItemFunctionRole.Arn'
      Runtime: python3.8
      Timeout: 100
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref 'SampleTable'
      Tags:
        - Key: lambda:createdBy
          Value: SAM
  putItemFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: lambda:createdBy
          Value: SAM
  SampleTable:
    Type: AWS::DynamoDB::Table
    Metadata:
      SamResourceId: SampleTable
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  getAllItemsFunctionApiPermissionProd:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref 'getAllItemsFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/
        - __ApiId__: !Ref 'ServerlessRestApi'
          __Stage__: '*'
  getAllItemsFunction:
    Type: AWS::Lambda::Function
    Metadata:
      SamResourceId: getAllItemsFunction
    Properties:
      Code:
        S3Bucket: aws-sam-cli-managed-default-samclisourcebucket-1iagsxb1e817l
        S3Key: qrcode/38bb643827c17aef56bbff66ae5b9ebb
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Handler: src/handlers/get_all_items.getAllItemsHandler
      MemorySize: 128
      Role: !GetAtt 'getAllItemsFunctionRole.Arn'
      Runtime: python3.8
      Timeout: 100
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref 'SampleTable'
      Tags:
        - Key: lambda:createdBy
          Value: SAM
  getAllItemsFunctionToTableConnectorPolicy:
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      SamResourceId: getAllItemsFunctionToTableConnector
      aws:sam:connectors:
        getAllItemsFunctionToTableConnector:
          Source:
            Type: AWS::Serverless::Function
          Destination:
            Type: AWS::Serverless::SimpleTable
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:ConditionCheckItem
              - dynamodb:PartiQLSelect
            Resource:
              - !GetAtt 'SampleTable.Arn'
              - !Sub
                - ${DestinationArn}/index/*
                - DestinationArn: !GetAtt 'SampleTable.Arn'
      Roles:
        - !Ref 'getAllItemsFunctionRole'
  getByIdFunctionToTableConnectorPolicy:
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      SamResourceId: getByIdFunctionToTableConnector
      aws:sam:connectors:
        getByIdFunctionToTableConnector:
          Source:
            Type: AWS::Serverless::Function
          Destination:
            Type: AWS::Serverless::SimpleTable
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:ConditionCheckItem
              - dynamodb:PartiQLSelect
            Resource:
              - !GetAtt 'SampleTable.Arn'
              - !Sub
                - ${DestinationArn}/index/*
                - DestinationArn: !GetAtt 'SampleTable.Arn'
      Roles:
        - !Ref 'getByIdFunctionRole'
  getByIdFunction:
    Type: AWS::Lambda::Function
    Metadata:
      SamResourceId: getByIdFunction
    Properties:
      Code:
        S3Bucket: aws-sam-cli-managed-default-samclisourcebucket-1iagsxb1e817l
        S3Key: qrcode/38bb643827c17aef56bbff66ae5b9ebb
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Handler: src/handlers/get_by_id.getByIdHandler
      MemorySize: 128
      Role: !GetAtt 'getByIdFunctionRole.Arn'
      Runtime: python3.8
      Timeout: 100
      Environment:
        Variables:
          SAMPLE_TABLE: !Ref 'SampleTable'
      Tags:
        - Key: lambda:createdBy
          Value: SAM
  getByIdFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: lambda:createdBy
          Value: SAM
  getAllItemsFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: lambda:createdBy
          Value: SAM
  ServerlessRestApiDeploymenta4d359a69a:
    Type: AWS::ApiGateway::Deployment
    Properties:
      Description: 'RestApi deployment id: a4d359a69a7b7d3809272fca52eacec55c21d54f'
      RestApiId: !Ref 'ServerlessRestApi'
      StageName: Stage
  ServerlessRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Body:
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        paths:
          /:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${putItemFunction.Arn}/invocations'
              responses: {}
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getAllItemsFunction.Arn}/invocations'
              responses: {}
          /{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getByIdFunction.Arn}/invocations'
              responses: {}
        swagger: '2.0'
  getByIdFunctionApiPermissionProd:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref 'getByIdFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/*
        - __ApiId__: !Ref 'ServerlessRestApi'
          __Stage__: '*'
  ServerlessRestApiProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref 'ServerlessRestApiDeploymenta4d359a69a'
      RestApiId: !Ref 'ServerlessRestApi'
      StageName: Prod
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
